// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package prisma

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/aejoy/prisma-sdk-go/internal/web/dto"
)

type PrismaGraphQLClient interface {
	CheckBySha256(ctx context.Context, sha256 *string, interceptors ...clientv2.RequestInterceptor) (*CheckBySha256, error)
	UploadPhoto(ctx context.Context, typeArg *dto.PhotoType, file *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UploadPhoto, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) PrismaGraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type CheckBySHA256_Photos struct {
	ID *string "json:\"id,omitempty\" graphql:\"id\""
}

func (t *CheckBySHA256_Photos) GetID() *string {
	if t == nil {
		t = &CheckBySHA256_Photos{}
	}
	return t.ID
}

type CheckBySha256 struct {
	Photos []*CheckBySHA256_Photos "json:\"photos,omitempty\" graphql:\"photos\""
}

func (t *CheckBySha256) GetPhotos() []*CheckBySHA256_Photos {
	if t == nil {
		t = &CheckBySha256{}
	}
	return t.Photos
}

type UploadPhoto struct {
	UploadPhoto *string "json:\"uploadPhoto,omitempty\" graphql:\"uploadPhoto\""
}

func (t *UploadPhoto) GetUploadPhoto() *string {
	if t == nil {
		t = &UploadPhoto{}
	}
	return t.UploadPhoto
}

const CheckBySha256Document = `query CheckBySHA256 ($sha256: String) {
	photos(count: 1, sha256: $sha256) {
		id
	}
}
`

func (c *Client) CheckBySha256(ctx context.Context, sha256 *string, interceptors ...clientv2.RequestInterceptor) (*CheckBySha256, error) {
	vars := map[string]any{
		"sha256": sha256,
	}

	var res CheckBySha256
	if err := c.Client.Post(ctx, "CheckBySHA256", CheckBySha256Document, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UploadPhotoDocument = `mutation Upload ($type: PhotoType, $file: Upload) {
	uploadPhoto(type: $type, file: $file)
}
`

func (c *Client) UploadPhoto(ctx context.Context, typeArg *dto.PhotoType, file *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UploadPhoto, error) {
	vars := map[string]any{
		"type": typeArg,
		"file": file,
	}

	var res UploadPhoto
	if err := c.Client.Post(ctx, "Upload", UploadPhotoDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	CheckBySha256Document: "CheckBySHA256",
	UploadPhotoDocument:   "Upload",
}
