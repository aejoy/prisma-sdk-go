// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package prisma

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/aejoy/prisma-sdk-go/internal/web/dto"
)

type PrismaGraphQLClient interface {
	GetByHash(ctx context.Context, sha256 *string, interceptors ...clientv2.RequestInterceptor) (*GetByHash, error)
	UploadPhoto(ctx context.Context, typeArg *dto.PhotoType, file *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UploadPhoto, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli clientv2.HttpClient, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) PrismaGraphQLClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type GetByHash_Photos_Has struct {
	Avatar *bool "json:\"avatar,omitempty\" graphql:\"avatar\""
	Banner *bool "json:\"banner,omitempty\" graphql:\"banner\""
}

func (t *GetByHash_Photos_Has) GetAvatar() *bool {
	if t == nil {
		t = &GetByHash_Photos_Has{}
	}
	return t.Avatar
}
func (t *GetByHash_Photos_Has) GetBanner() *bool {
	if t == nil {
		t = &GetByHash_Photos_Has{}
	}
	return t.Banner
}

type GetByHash_Photos struct {
	Has *GetByHash_Photos_Has "json:\"has,omitempty\" graphql:\"has\""
	ID  *string               "json:\"id,omitempty\" graphql:\"id\""
}

func (t *GetByHash_Photos) GetHas() *GetByHash_Photos_Has {
	if t == nil {
		t = &GetByHash_Photos{}
	}
	return t.Has
}
func (t *GetByHash_Photos) GetID() *string {
	if t == nil {
		t = &GetByHash_Photos{}
	}
	return t.ID
}

type GetByHash struct {
	Photos []*GetByHash_Photos "json:\"photos,omitempty\" graphql:\"photos\""
}

func (t *GetByHash) GetPhotos() []*GetByHash_Photos {
	if t == nil {
		t = &GetByHash{}
	}
	return t.Photos
}

type UploadPhoto struct {
	UploadPhoto *string "json:\"uploadPhoto,omitempty\" graphql:\"uploadPhoto\""
}

func (t *UploadPhoto) GetUploadPhoto() *string {
	if t == nil {
		t = &UploadPhoto{}
	}
	return t.UploadPhoto
}

const GetByHashDocument = `query GetByHash ($sha256: String) {
	photos(sha256: $sha256) {
		id
		has {
			avatar
			banner
		}
	}
}
`

func (c *Client) GetByHash(ctx context.Context, sha256 *string, interceptors ...clientv2.RequestInterceptor) (*GetByHash, error) {
	vars := map[string]any{
		"sha256": sha256,
	}

	var res GetByHash
	if err := c.Client.Post(ctx, "GetByHash", GetByHashDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UploadPhotoDocument = `mutation UploadPhoto ($type: PhotoType, $file: Upload) {
	uploadPhoto(type: $type, file: $file)
}
`

func (c *Client) UploadPhoto(ctx context.Context, typeArg *dto.PhotoType, file *graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*UploadPhoto, error) {
	vars := map[string]any{
		"type": typeArg,
		"file": file,
	}

	var res UploadPhoto
	if err := c.Client.Post(ctx, "UploadPhoto", UploadPhotoDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetByHashDocument:   "GetByHash",
	UploadPhotoDocument: "UploadPhoto",
}
